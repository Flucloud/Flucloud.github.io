<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>搭建一个属于你自己的博客（每日连载更新中）</title>
    <link href="/2024/01/27/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/01/27/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>现在关于搭建个人博客，网上有很多教程，但是我在跟着那些教程走时遇到了很多奇奇怪怪的问题，对于一些不是很熟悉电脑的人来说，这些问题解决起来可能会比较困难，于是便有了这篇文章，排掉笔者遇到的雷，手把手教你搭建一个属于你自己的博客。<br>跟着本文的教学，你将得到一个基于<strong>hexo框架</strong>的博客，并且通过<strong>Github Page</strong>免费发布网页，最终使用<strong>Netlify</strong>在你的Git仓库中触发自动化的构建和部署流程以确保代码的更改能快速上线。<br><strong>前排提醒：构建一个个人博客是一件很酷的事，但也不是一件容易的事。如果你已经下定决心，就请做好遇到各种抽象问题的准备，继续看下去吧</strong><br>笔者的开发环境：.yml、.md皆使用vscode编辑（并非广告，只是单纯推荐，赞美传说中的宇宙第一编辑器！）  </p><hr><h2 id="1-安装Git和Node-js"><a href="#1-安装Git和Node-js" class="headerlink" title="1. 安装Git和Node.js"></a>1. 安装Git和Node.js</h2><h3 id="1-1-安装Git"><a href="#1-1-安装Git" class="headerlink" title="1.1 安装Git"></a>1.1 安装Git</h3><p>进入以下网址<br><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>点击右侧的<strong>Download for Windows</strong>，然后选择合适的版本（一般是Standalone Installer下方的64-bit版）下载安装即可。<br>安装时，如果你不是很熟悉Git，不需要进行一些特别个性化的配置，就只要一路无脑“下一步”，最后安装即可。<br>完成后打开命令行，输入 <code>git --version</code> 命令并且回车，如果有输出版本信息即说明安装正确。<br><strong>命令行的打开方式：点击开始，搜索栏中搜索<code>cmd</code>,选择“命令提示符”即可</strong><br>如果你对Git比较感兴趣，想进一步学习，笔者推荐以下教程（非广告，只是笔者学习的时候，感觉这个最浅显易懂）<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><h3 id="1-2-安装Node-js"><a href="#1-2-安装Node-js" class="headerlink" title="1.2 安装Node.js"></a>1.2 安装Node.js</h3><p>进入以下网址<br><a href="https://nodejs.org/">https://nodejs.org</a><br>安装那个<strong>Recommanded For Most Users</strong>的版本（当然，如果你头铁非要体验最新版本也行，但是不保证不会出问题（）），安装时也是无脑“下一步”即可。<br>完成后打开命令行，输入 <code>node -v</code> 命令并且回车，有提示即安装正确。  </p><hr><h2 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>创建一个文件夹用于存储博客的本地文件（我个人是放在了磁盘根目录，感觉比较保险），并且双击进入文件夹。<br>在文件夹空白处右键鼠标，点击“显示更多选项”，接着点击<strong>Open Git Bash Here</strong>,这时候会出现一个弹窗，这个就是当前文件夹下的<strong>Git命令行</strong>，弹窗上有一行文字显示了当前的电脑用户以及Git命令行所属的路径，为了后面叙述方便，我们将这一行命名为<strong>命令头</strong>（只是我为了叙述方便随便起的，不是严谨的命名）。<br>接下来你需要做的是在现在这个Git命令行中依次运行以下5条命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo server<br></code></pre></td></tr></table></figure><p>（命令运行完成的标志是重新弹出来一行命令头，<strong>请务必等一条命令运行完成后，再输入新的命令</strong>）</p><h3 id="2-2-hexo中的常用命令"><a href="#2-2-hexo中的常用命令" class="headerlink" title="2.2 hexo中的常用命令"></a>2.2 hexo中的常用命令</h3><p>以下命令现在不需要运行，只是列出来介绍以下，之后我们会用到。</p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>hexo g</td><td>生成网页静态文件</td></tr><tr><td>hexo cl</td><td>清空静态文件</td></tr><tr><td>hexo s</td><td>在本地运行网页</td></tr><tr><td>hexo d</td><td>将网页部署到网站</td></tr><tr><td>hexo g -d</td><td>生成静态文件并部署到网站</td></tr><tr><td>hexo new 文件名</td><td>创建新文章</td></tr></tbody></table><hr><h2 id="3-搭建网页框架"><a href="#3-搭建网页框架" class="headerlink" title="3.搭建网页框架"></a>3.搭建网页框架</h2><h3 id="3-1-选择并配置框架"><a href="#3-1-选择并配置框架" class="headerlink" title="3.1 选择并配置框架"></a>3.1 选择并配置框架</h3><p>进入以下网址选择心仪的模板主题，点击主题的名称即有非常详细的配置教程，跟着配置即可。<br><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h3 id="3-2-生成并预览静态文件"><a href="#3-2-生成并预览静态文件" class="headerlink" title="3.2 生成并预览静态文件"></a>3.2 生成并预览静态文件</h3><p>配置好网页主题后，如果想要预览网页效果，可以通过以下步骤实现：</p><ol><li>打开博客本地文件夹中的blog文件夹，在此文件夹下打开Git命令行  </li><li>运行<code>hexo g</code>命令以生成网页静态文件  </li><li>运行<code>hexo s</code>命令以本地运行网页，在弹出来的内容中，按住ctrl点击“INFO  Hexo is running at <a href="http://localhost:4000/">http://localhost:4000/</a> . Press Ctrl+C to stop.”中下划线部分（笔者这里得点击“4000”才行），即可</li><li>预览完后，请在Git命令行中使用Ctrl+C以终止运行，并且关闭Git命令行</li></ol><h2 id="4-配置SSH密钥"><a href="#4-配置SSH密钥" class="headerlink" title="4.配置SSH密钥"></a>4.配置SSH密钥</h2><p>首先你得有一个github账号，如果没有请自行注册，这一步应该很简单也没啥困难，笔者就不展开详细写了（）<br><strong>！！！注册Github用的邮箱建议用常用邮箱！！！</strong></p><h3 id="4-1-创建Github仓库"><a href="#4-1-创建Github仓库" class="headerlink" title="4.1 创建Github仓库"></a>4.1 创建Github仓库</h3><p>注册完以后，回到主页，点击左侧的<strong>new</strong>新建仓库，名称为<code>&lt;user&gt;.github.io</code>，（<code>&lt;user&gt;</code>可自由更改为其他文本，后文<code>&lt;user&gt;</code>处的内容必须与此处一致，但是.github.io不能改，这个仓库的名称将是之后你的博客的域名），接着点击<strong>Create repository</strong>完成创建。</p><h3 id="4-2-更改服务器SSH端口"><a href="#4-2-更改服务器SSH端口" class="headerlink" title="4.2 更改服务器SSH端口"></a>4.2 更改服务器SSH端口</h3><p>这一步很多教程里面都没有写，笔者在配置SSH时，由于系统默认的SSH端口为22，一些加速器等可能会禁止22端口进行访问，所以出现了<code>Connection closed by remote host</code>的情况，因此在这里建议修改一下。  </p><ol><li>打开“此电脑”，点开上方的“查看” -&gt; “显示”，确认勾选了其中的“文件扩展名”</li><li>打开C:\Users\用户名&#x2F;.ssh</li><li>新建文本文档，其内容为</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>Hostname ssh.github.com<br>Port 443<br></code></pre></td></tr></table></figure><p>保存文本内容后退出。<br>4. 重命名该文件名为<code>config</code>，<strong>注意：此文件无扩展名！一定要删除“.txt”</strong>  </p><h3 id="4-3-获取SSH密钥"><a href="#4-3-获取SSH密钥" class="headerlink" title="4.3 获取SSH密钥"></a>4.3 获取SSH密钥</h3><p>在命令行中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C 注册Github时的邮箱<br></code></pre></td></tr></table></figure><p>然后添加到<strong>SSH-Agent</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_ed25519<br></code></pre></td></tr></table></figure><p>接着使用以下命令复制SSH密钥，建议复制完以后先粘贴到别的地方备用，下一步会用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clip &lt; %USERPROFILE%\.ssh\id_ed25519.pub<br></code></pre></td></tr></table></figure><h3 id="4-4-添加SSH密钥"><a href="#4-4-添加SSH密钥" class="headerlink" title="4.4 添加SSH密钥"></a>4.4 添加SSH密钥</h3><p>Github中点击右上角头像中的<code>Setting</code>，接着点击左侧<code>SSH and GPG keys</code>，然后点击右上角的<code>New SSH key</code>，把刚刚复制的SSH密钥粘贴到key中，title不用写，点击Add SSH Key 添加密钥。<br>打开命令行，输入以下命令来检测SSH密钥状态，如果显示<strong>You’ve successfully authenticated</strong>，则说明配置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><h2 id="5-部署到Github-Pages"><a href="#5-部署到Github-Pages" class="headerlink" title="5. 部署到Github Pages"></a>5. 部署到Github Pages</h2><h3 id="5-1-初始配置"><a href="#5-1-初始配置" class="headerlink" title="5.1 初始配置"></a>5.1 初始配置</h3><p>在命令行中使用以上命令完成初始配置，<code>&lt;user&gt;</code>和<code>&lt;email&gt;</code>处分别替换成上文你写的<code>&lt;user&gt;</code>和注册github时的邮箱  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&lt;user&gt;&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;&lt;email&gt;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-配置-config-yml"><a href="#5-2-配置-config-yml" class="headerlink" title="5.2 配置_config.yml"></a>5.2 配置<code>_config.yml</code></h3><p>将你的<code>_config.yml</code>文件中的对应内容改成以下内容，<code>&lt;user&gt;</code>处的内容依旧改成先前同样的。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">url: https://&lt;user&gt;.github.io/<br>deploy:<br>    <span class="hljs-built_in">type</span>: git<br>    repo: git@github.com:&lt;user&gt;/&lt;user&gt;.github.io.git<br>    branch: master<br>    message:<br></code></pre></td></tr></table></figure><p>更改完毕后保存并退出。</p><h3 id="5-3-安装部署插件"><a href="#5-3-安装部署插件" class="headerlink" title="5.3 安装部署插件"></a>5.3 安装部署插件</h3><p>输入以下命令安装部署插件，以便部署到Github Page  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm add hexo-deployer-git<br></code></pre></td></tr></table></figure><h2 id="6-使用Netlify加速访问和自动化部署"><a href="#6-使用Netlify加速访问和自动化部署" class="headerlink" title="6. 使用Netlify加速访问和自动化部署"></a>6. 使用Netlify加速访问和自动化部署</h2><h3 id="6-1-注册"><a href="#6-1-注册" class="headerlink" title="6.1 注册"></a>6.1 注册</h3><p>进入以下网址注册一个Netlify账号，通过Github注册  </p><p><a href="https://app.netlify.com/">https://app.netlify.com/</a></p><h3 id="6-2-关联Github"><a href="#6-2-关联Github" class="headerlink" title="6.2 关联Github"></a>6.2 关联Github</h3><p>注册成功后会自动跳转到你的首页，点击<strong>Add new site</strong>中的<strong>Import an existing project</strong>，点击<strong>GitHub</strong>，与 GitHub 关联。</p><h3 id="6-3-上传博客"><a href="#6-3-上传博客" class="headerlink" title="6.3 上传博客"></a>6.3 上传博客</h3><p>关联 GitHub 后，下方会出现你 GitHub 中的仓库，点击你创建的博客，接着点击<strong>Deploy site</strong>上传。</p><h3 id="6-4-更改域名"><a href="#6-4-更改域名" class="headerlink" title="6.4 更改域名"></a>6.4 更改域名</h3><p>上传完毕后回自动跳转回到项目的首页，选择<strong>Site settings</strong>，接着往下滑，点击<strong>Change site name</strong>更改你网站的域名。<br>这个域名其实是你之前<code>&lt;user&gt;.github.io</code>的“别名”，但是通过Netlify加速的域名与原生域名相比：延迟更小，访问更快，所以笔者一般使用Netlify提供的域名。  </p><h2 id="7-完成辣"><a href="#7-完成辣" class="headerlink" title="7. 完成辣"></a>7. 完成辣</h2><p>现在你拥有一个属于你自己的博客了！那么该如何创建博文并且发表在你的博客上呢？<br>别急（），疯狂码字更新ing……  </p>]]></content>
    
    
    <categories>
      
      <category>一些正经的东西</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一曲万情</title>
    <link href="/2024/01/20/%E4%B8%80%E6%9B%B2%E4%B8%87%E6%83%85/"/>
    <url>/2024/01/20/%E4%B8%80%E6%9B%B2%E4%B8%87%E6%83%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p>真正叫你醍醐灌顶的，只能是一段经历。而那句话，只是火药仓库内划燃的一根火柴。<br>————刘震云《一句顶万句》  </p></blockquote><hr><p>独处时，我喜欢细数一丝丝难以忘怀的过去，查看一条条聊天记录，过往的一切和我赋予他们的意义成就了我。今夜，我对此更加深信不疑。  </p><p>夜深无人可以倾吐心声时，总习惯用琴声把故事讲给自己听。《愿樱》之后，翻阅琴谱，偶然发现《流行的云》也是LowC调弦，就顺便试着练一练。<br>岸部真明的曲子总是舒缓平静，《云》也不例外，音符缓缓流淌，仿佛一位历经沧桑的老人在慢慢地给孩子们讲他的故事，讲他年少时的梦想，讲他与老伴走过的路，讲他曾拥有的荣光和那些让心脏超载的悲伤。可出乎意料地，曲罢抬首，却见他红了眼眶，“怎么这曲子这么悲伤呢？” 他的眼里闪烁着回忆的光亮。  </p><p>我曾经苦苦思考，到底是什么让我成为了现在的我。我想应当是我们的经历与对其的感悟。也许这并不是真正的谜底，但至少现在，我对其深信不疑。我曾以为我总有足够多的勇气去面对那些让我恐惧的可能的未来，但仅仅走过了几载的短暂光阴，我终究变成了现在这个患得患失的我。可是那些我以为能够拥有却最终化作泡影的幻想，无法成为我与过去的自己和解的筹码。而正是这一点点的改变慢慢累积，最终成为推动那叶小舟远航的潮汐，成为一条法则，改变我的视线、改变我观察世界的方式。  </p><p>如果人有灵魂，那我想，每个灵魂的颜色都是不一样的。我们用热爱为它上色，悲伤与悔恨为它加上阴影，而最终把它渲染成真实的我们是那些际遇。  </p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音乐 情感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>滥觞</title>
    <link href="/2024/01/19/%E6%BB%A5%E8%A7%9E/"/>
    <url>/2024/01/19/%E6%BB%A5%E8%A7%9E/</url>
    
    <content type="html"><![CDATA[<p>白马倥偬，引流觞致似水华年；弦歌不辍，纵兕觥许长乐未央。  </p><blockquote><p>我是渔歌子，分享生活，共鸣情感，传递热爱。  </p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
